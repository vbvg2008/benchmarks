1. why Jax requires a RNG in its function?
    A: Because the conventional way of handling random number (like in numpy) causes the random state to update.
    It might create issues when training on multi-processing.   In jax, the state update needs to be done explicitly.

2. why  matrix multiplication on numpy array is slightly slower than using jax array?
    A: numpy data is initialized in CPU and needs to transfer to GPU every time. whereas jax array resides at GPU.
    One can use `device_put` to send data to GPU, and the data will only come back to CPU when needed.

3. why add block until ready when multiplying matrix?

4. seems like the first run without jit takes longer time than using jit.  If it's not compiling program, why is it taking longer? (2_jit.py)

5. how does `jax.grad` handle intermediate gradient calculation? like x -> y -> z -> o,   we need dz/dy ?

6. why calculating second-order derivative is throwing an error Gradient only defined for scalar-output functions. Output had shape: (3,). (3_grad)

7. how to use the jit in function without using @jit?   jit(function) doesn't give the same speedup
    A: jit(function)(argument).

8. It seems like using jit decorator is faster than jit(function),(2_jit.py, 17_jit_compile), why?
    A: function caching.  if jit(f) is called inside a loop, then the function is compiled everytime. (but not traced every time)


9. when jit isn't available (like when shape is dynamic), using numpy array is faster than using jnp array. (7_jit.py) why?   also, the difference is smaller when shape is static. why?

10. shoudl the random number key keep getting split everytime we create random numbers?
    A: Yes, there's a single-use principle for every random key

11. Is there an efficient way to jit control flow without using static argument (wichi will build graph every time)? for example. in 13_control_flow.py,
every value evaluated on `f` will trigger the compiling. However, realistically, the compling only needs to happen two times (one for x<3, one otherwise):
    A: use lax.cond.


12. How many copies of cached function will jax store?